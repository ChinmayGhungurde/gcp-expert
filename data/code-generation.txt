Vertex AI
Documentation
Generative AI
Was this helpful?
Send feedback
Code generation
bookmark_border
On this page
Use cases
HTTP request
Model versions
Request body
Sample request
Codey for Code Generation (code-bison) is the name of the model that supports code generation. It's a foundation model that generates code based on a natural language description. The type of content that Codey for Code Generation can create includes functions, web pages, and unit tests. Codey for Code Generation is supported by the code generation Codey APIs. Codey APIs are in the PaLM API family.
To explore this model in the console, see the Codey for Code Generation model card in the Model Garden.
Go to the Model Garden
Use cases
Some common used cases for code generation are:
Unit tests: Use the prompt to request a unit test for a function.
Write a function: Pass a problem to the model to get a function that solves that problem.
Create a class: Use a prompt to describe the purpose of a class and have code that defines the class returned.
HTTP request
POST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/code-bison:predict
Model versions
To use the latest model version, specify the model name without a version number, for example code-bison.
To use a stable model version, specify the model version number, for example code-bison@001. Each stable version is available for six months after the release date of the subsequent stable version.
The following table contains the available stable model versions:
code-bison model Release date
code-bison@001 June 29, 2023
For more information, see Model versions and lifecycle.
Request body
{
  "instances": [
    { "prefix": string }
  ],
  "parameters": {
    "temperature": number,
    "maxOutputTokens": integer,
    "candidateCount": integer,
    "stopSequences": [ string ]
  }
}
The following are the parameters for the code generation model named code-bison. The code-bison model is one of the models in Codey. You can use these parameters to help optimize your code completion prompt. For more information, see Code models overview and Create prompts for code completion.
Parameter Description Acceptable values
prefix
(required)
For code models, prefix represents the beginning of a piece of meaningful programming code or a natural language prompt that describes code to be generated. A valid text string
temperature
The temperature is used for sampling during response generation. Temperature controls the degree of randomness in token selection. Lower temperatures are good for prompts that require a less open-ended or creative response, while higher temperatures can lead to more diverse or creative results. A temperature of 0 means that the highest probability tokens are always selected. In this case, responses for a given prompt are mostly deterministic, but a small amount of variation is still possible.
0.0–1.0
Default: 0.2
maxOutputTokens
Maximum number of tokens that can be generated in the response. A token is approximately four characters. 100 tokens correspond to roughly 60-80 words.
Specify a lower value for shorter responses and a higher value for longer responses.
1–2048
Default: 1024
candidateCount
(optional)
The number of response variations to return.
1-4
Default: 1
stopSequences
(optional)
Specifies a list of strings that tells the model to stop generating text if one of the strings is encountered in the response. If a string appears multiple times in the response, then the response truncates where it's first encountered. The strings are case-sensitive.

For example, if the following is the returned response when stopSequences isn't specified:

public static string reverse(string myString)

Then the returned response with stopSequences set to ["Str", "reverse"] is:

public static string A list of strings
Sample request
REST
Vertex AI SDK for Python
Node.js
Java
To test a text prompt by using the Vertex AI API, send a POST request to the publisher model endpoint.
Before using any of the request data, make the following replacements:
PROJECT_ID: Your project ID.
For other fields, see the Request body table.
HTTP method and URL:
POST https://us-central1-aiplatform.googleapis.com/v1/projects/
PROJECT_ID/locations/us-central1/publishers/google/models/code-bison:predict
Request JSON body:
{
  "instances": [
    { "prefix": "
PREFIX" }
  ],
  "parameters": {
    "temperature": 
TEMPERATURE,
    "maxOutputTokens": 
MAX_OUTPUT_TOKENS,
    "candidateCount": 
CANDIDATE_COUNT
  }
}
To send your request, choose one of these options:
curl
PowerShell
Note: The following command assumes that you have logged in to the gcloud CLI with your user account by running gcloud init or gcloud auth login, or by using Cloud Shell, which automatically logs you into the gcloud CLI. You can check the currently active account by running gcloud auth list.
Save the request body in a file named request.json, and execute the following command:
curl -X POST \
    -H "Authorization: Bearer $(gcloud auth print-access-token)" \
    -H "Content-Type: application/json; charset=utf-8" \
    -d @request.json \
    "https://us-central1-aiplatform.googleapis.com/v1/projects/
PROJECT_ID/locations/us-central1/publishers/google/models/code-bison:predict"








You should receive a JSON response similar to the sample response.



















































































































































Response body
{
  "predictions": [
    {
      "content": string,
      "score": float,
      "citationMetadata": {
        "citations": [
          {
            "startIndex": integer,
            "endIndex": integer,
            "url": string,
            "title": string,
            "license": string,
            "publicationDate": string
          }
        ]
      },
      "safetyAttributes":{
        "categories": [],
        "blocked": false,
        "scores": []
      },
      "score": float
    }
  ]
}
Response element Description
blocked A boolean flag associated with a safety attribute that indicates if the model's input or output was blocked.
categories A list the safety attribute category names that are associated with the generated content. The order of the scores in the scores parameter matches the order of the categories. For example, the first score in the scores parameter indicates the likelihood that the response violates the first category in the categories list.
citationMetadata An element that contains an array of citations.
citations An array of citations. Each citation contains its metadata.
content The result generated by the model using the input text.
endIndex An integer that specifies where a citation ends in the content.
license The license associated with a citation.
publicationDate The date a citation was published. Its valid formats are YYYY, YYYY-MM, and YYYY-MM-DD.
safetyAttributes An array of safety attributes. The array contains one safety attribute for each response candidate.
score A float value that's less than zero. The higher the value for score, the greater confidence the model has in its response.
scores An array of float values. Each value is a score that indicates the likelihood that the response violates the safety category it's checked against. The lower the value, the safer the model considers the response. The order of the scores in the array corresponds to the order of the safety attributes in the categories response element.
startIndex An integer that specifies where a citation starts in the content.
title The title of a citation source. Examples of source titles might be that of a news article or a book.
url The URL of a citation source. Examples of a URL source might be a news website or a GitHub repository.
Sample response
{
  "predictions": [
    {
      "citationMetadata": {
        "citations": []
      },
      "safetyAttributes": {
        "scores": [],
        "categories": [],
        "blocked": false
      },
      "content": "CONTENT",
      "score": -1.1161688566207886
    }
  ]
}
Stream response from Generative AI models
The parameters are the same for streaming and non-streaming requests to the APIs.
To view sample code requests and responses using the REST API, see Examples using the streaming REST API.
To view sample code requests and responses using the Vertex AI SDK for Python, see Examples using Vertex AI SDK for Python for streaming.
Was this helpful?
Send feedback