Vertex AI
Documentation
Generative AI
Was this helpful?
Send feedback
Create prompts to generate code
bookmark_border
On this page
Use cases
Supported model
How to submit and test a code generation prompt
Submit a prompt (console)
Submit a prompt with curl (REST)
Example code generation prompts
Generate a Docker script
Generate a function
The Vertex AI Codey APIs includes the code generation API which supports generating code using a natural language description. Use the generative AI foundation model named code-bison to interact with the code generation API. This topic shows you strategies for creating prompts that work with the code-bison model to generate code.
Use cases
Some common use cases for code generation are:
Unit tests - Design a prompt to request a unit test for a function.
Write a function - Pass a problem to the model to get a function that solves the problem.
Create a class - Use a prompt to describe the purpose of a class and have code that defines the class returned.
Supported model
The following model supports code generation tasks:
code-bison
How to submit and test a code generation prompt
You can submit a code generation prompt in the Generative AI Studio, as a REST command, or using Python.
When you submit a prompt, you need to specify values for the temperature and maximum output tokens. For more information, see Code generation model parameters.
Submit a prompt (console)
To run and test a code generation prompt, use the code-bison model in Generative AI Studio. For more information about Generative AI Studio, see Introduction to Generative AI Studio.
Do the following to use Generative AI Studio to submit a code generation prompt:
Go to the Generative AI Studio page from the Vertex AI section in the Google Cloud console. Generative AI Studio
On the Language card, click Open.
On Design and test your own prompts, click Code prompt.
In Model, select the model with the name that begins with code-bison. A three digit number after code-bison indicates the version number of the model. For example, code-bison@001 is the name of version one of the code generation model.
In Prompt, enter a code generation prompt.
Adjust Temperature or Token limit to experiment with how they affect the response. For more information, see Code generation model parameters.
Click Submit to generate a response.
Submit a prompt with curl (REST)
Do the following to use curl submit a code generation prompt:
Log in to the Google Cloud CLI with your user account by doing one of the following:
Run gcloud init or gcloud auth login
Use Cloud Shell, which logs you into the gcloud CLI. You can check the currently active account by running gcloud auth list.
Create a JSON file named request.json.
Enter the following code in request.json.
{
  "instances": {
    "prefix": "
PROMPT"
  },
  "parameters": {
    "temperature": 
TEMPERATURE,
    "maxOutputTokens": 
MAX_OUTPUT_TOKENS,
    "candidateCount": 
CANDIDATE_COUNT
  }
}
In request.json, replace PROMPT and specify your parameters for temperature, and maximum output tokens. For more information, see Code generation model parameters.
In your shell, run the following command. Replace PROJECT_ID with your project ID.
curl -X POST \
    -H "Authorization: Bearer $(gcloud auth print-access-token)" \
    -H "Content-Type: application/json; charset=utf-8" \
    -d @request.json \
    "https://us-central1-aiplatform.googleapis.com/v1/projects/
PROJECT_ID/locations/us-central1/publishers/google/models/code-bison:predict"
Example code generation prompts
Use the following examples to learn how to design code generation prompts.
Generate a Docker script
Generate a function
Generate a unit test
Generate a Docker script
You can use the code generation model to generate a Docker script. The following prompt generates a Docker script to create a Linux machine with specific libraries installed:
Prompt:
      Generate a Docker script to create a simple linux machine that has python 3.10
      installed with following libraries: pandas, tensorflow, numpy
        
Response:
      # This Dockerfile creates a simple Linux machine that has Python 3.10 installed with the following libraries: pandas, tensorflow, and numpy.

      # Start with a base image that has Python 3.10 installed.
      FROM python:3.10

      # Install the pandas library.
      RUN pip install pandas

      # Install the tensorflow library.
      RUN pip install tensorflow
      # Install the numpy library.
      RUN pip install numpy

      # Create a working directory.
      WORKDIR /usr/src/app

      # Copy the application code to the working directory.
      COPY . .

      # Run the application.
      CMD ["python", "app.py"]
        
Generate a function
You can use the code generation model to generate a function. The following prompt generates a function that inputs a year and determines if it's a leap year or not:
Prompt:
Write a function that checks if a year is a leap year.
  
Response:
def is_leap_year(year):
  """
  Returns True if the given year is a leap year, False otherwise.

  Args:
    year: The year to check.

  Returns:
    True if the year is a leap year, False otherwise.
  """

  # A year is a leap year if it is divisible by 4, but not divisible by 100,
  # unless it is also divisible by 400.

  return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0
  
Generate a unit test
You can use the code generation model to generate a unit test.
The following prompt generates a unit test for a function that determines if a year is a leap year or not.
Prompt:
Write a unit test for this function:
def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False
  
Response:
python
def test_is_leap_year():

    # Test for leap years
    assert is_leap_year(2020) == True
    assert is_leap_year(2024) == True
    assert is_leap_year(2000) == True

    # Test for non-leap years
    assert is_leap_year(2019) == False
    assert is_leap_year(2021) == False
    assert is_leap_year(1900) == False

  
What's next
Learn how to create code chat prompts.
Learn how to create code completion prompts.
Learn about responsible AI best practices and Vertex AI's safety filters.
Learn about streaming responses from a model.
Was this helpful?
Send feedback